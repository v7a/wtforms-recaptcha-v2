"""Provides a wtforms validator to validate a recaptcha v2 response and a form mixin to create a form
field for recaptcha v2 with the possibility to disable validation altogether under certain
circumstances.
"""

from typing import Protocol, Optional

import requests
from requests import HTTPError, Timeout

from wtforms import ValidationError

__version__ = "0.1"


class MakeErrorMessage(Protocol):
    """Make an error message."""

    def __call__(self, form: type) -> str:
        pass


class GetRemoteIP(Protocol):
    """Get the remote IP of the current request."""

    def __call__(self, form: type) -> Optional[str]:
        pass


class RecaptchaV2Validator:
    """Validate a recaptcha response.

    By default, if the service is unavailable, validation passes to not degrade user experience.

    The verification service optionally takes a remoteip field to check if the one solving the
    captcha actually submitted the form. A callback taking the form instance as parameter allows
    you to provide the remote IP regardless of which toolkit or framework you use.

    The reason why error messages are retrieved via a callback is to give you the possibility to
    translate the messages without being dependent on this library to provide all of them for you.
    Each callback takes the associated form instance as parameter from which you can use any state
    you like. Defaults are provided for English.

    :param secret_key: Secret key generated by the captcha administration service
    :param make_error_msg: Make error message in case captcha verification fails
    :param make_connection_error_msg: Make error message if service is unavailable
    :param get_remote_ip: Get remote IP of the current request
    :param raise_on_connection_error: Pass or fail validation if service is unavailable
    """

    def __init__(
        self,
        secret_key: str,
        request_timeout: float = 2000.0,
        make_error_msg: MakeErrorMessage = lambda _: "Captcha verification failed.",
        make_connection_error_msg: MakeErrorMessage = lambda _: "Verification service unavailable.",
        get_remote_ip: GetRemoteIP = lambda _: None,
        raise_on_connection_error: bool = False,
        verfication_url: str = "https://www.google.com/recaptcha/api/siteverify",
    ):
        self.secret_key = secret_key
        self.request_timeout = request_timeout
        self.make_error_msg = make_error_msg
        self.make_connection_error_msg = make_connection_error_msg
        self.get_remote_ip = get_remote_ip
        self.raise_on_connection_error = raise_on_connection_error
        self.verification_url = verfication_url

    def _collect_data(self, form, field) -> dict:
        data = {}
        data["secret"] = self.secret_key
        data["response"] = field.data

        remoteip = self.get_remote_ip(form)
        if remoteip is not None:
            data["remoteip"] = remoteip

        return data

    def __call__(self, form, field):
        try:
            if not requests.post(
                self.verification_url, self._collect_data(form, field), timeout=self.request_timeout
            ).json()["success"]:
                raise ValidationError(self.make_error_msg(form))
        except (HTTPError, Timeout, ConnectionError):
            if self.raise_on_connection_error:
                raise ValidationError(self.make_connection_error_msg(form))
